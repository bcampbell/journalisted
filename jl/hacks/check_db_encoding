#!/usr/bin/env python
#
# hacky tool to convert DB from one encoding to another.
#

import sys
#import string
#import time
#import shutil
#import os
from optparse import OptionParser
import logging

import site
site.addsitedir("../pylib")
from JL import DB


_CONFIG = {
    'encoding': 'utf-8',
    'tables': [
        {
          'name': 'article_image',
          'pk': 'id',
          'fields': ('url','caption','credit')
        },
        {
          'name': 'article',
          'pk': 'id',
          'fields': ('title','byline','description','permalink','srcurl','srcid')
        },
        {
          'name': 'article_url',
          'pk': 'id',
          'fields': ('url',)
        },
        {
          'name': 'article_content',
          'pk': 'id',
          'fields': ('content',)
        },
        {
          'name':'requeststash',
          'pk':'key',
          'fields': ('key','method','url','extra','email')
        }
    ]
}






def check_table( table, pk, fields, encoding ):

    c = DB.conn().cursor()

    logging.info( "checking that %s is %s" %(table,encoding))

    # fetch in batches to avoid massive memory use
    # TODO: named cursors might be a better bet (pyscopg2 uses real
    # postgresql cursors for them)
    offset = 0
    limit = 5000
    while 1:
        logging.debug(" fetch %d-%d" % ( offset, offset+limit-1))
        c.execute( "SELECT * FROM " + table + " OFFSET %s LIMIT %s", (offset,limit) )
        cnt = 0
        while 1:
            row = c.fetchone()
            if row is None:
                break
            cnt=cnt+1

            for f in fields:
                val = row[f]
                if isinstance(val, str):
                    try:
                        u = val.decode( encoding )
                        val = u.encode( encoding )
                    except UnicodeDecodeError:
                        logging.error("BAD decode: %s.%s (%s=%s)" %(table,f,pk,row[pk]))
                        continue
                    except UnicodeEncodeError:
                        logging.error("BAD encode: %s.%s (%s=%s)" %(table,f,pk,row[pk]))
                        continue
        if cnt==0:
            break;
        offset = offset + cnt


def main():

    parser = OptionParser()
    parser.add_option('-v', '--verbose', action='store_true')
    parser.add_option('-d', '--debug', action='store_true')
    parser.add_option("-t", "--table",
        dest="table",
        metavar="TABLE",
        help="only check TABLE" );
    (options, args) = parser.parse_args()

    log_level = logging.WARNING
    if options.verbose:
        log_level = logging.INFO
    if options.debug:
        log_level = logging.DEBUG
    logging.basicConfig(level=log_level, format='%(message)s')


#    go()
    for table in _CONFIG['tables']:
        if (options.table is None) or options.table==table['name']:
            check_table(table['name'],table['pk'],table['fields'],_CONFIG['encoding'])

if __name__ == "__main__":
    main()

